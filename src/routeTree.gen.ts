/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as CreateRouteImport } from './routes/create'
import { Route as CollectionRouteImport } from './routes/collection'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ViewIdRouteImport } from './routes/view.$id'
import { Route as EditIdRouteImport } from './routes/edit.$id'

const CreateRoute = CreateRouteImport.update({
  id: '/create',
  path: '/create',
  getParentRoute: () => rootRouteImport,
} as any)
const CollectionRoute = CollectionRouteImport.update({
  id: '/collection',
  path: '/collection',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ViewIdRoute = ViewIdRouteImport.update({
  id: '/view/$id',
  path: '/view/$id',
  getParentRoute: () => rootRouteImport,
} as any)
const EditIdRoute = EditIdRouteImport.update({
  id: '/edit/$id',
  path: '/edit/$id',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/collection': typeof CollectionRoute
  '/create': typeof CreateRoute
  '/edit/$id': typeof EditIdRoute
  '/view/$id': typeof ViewIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/collection': typeof CollectionRoute
  '/create': typeof CreateRoute
  '/edit/$id': typeof EditIdRoute
  '/view/$id': typeof ViewIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/collection': typeof CollectionRoute
  '/create': typeof CreateRoute
  '/edit/$id': typeof EditIdRoute
  '/view/$id': typeof ViewIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/collection' | '/create' | '/edit/$id' | '/view/$id'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/collection' | '/create' | '/edit/$id' | '/view/$id'
  id: '__root__' | '/' | '/collection' | '/create' | '/edit/$id' | '/view/$id'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  CollectionRoute: typeof CollectionRoute
  CreateRoute: typeof CreateRoute
  EditIdRoute: typeof EditIdRoute
  ViewIdRoute: typeof ViewIdRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/create': {
      id: '/create'
      path: '/create'
      fullPath: '/create'
      preLoaderRoute: typeof CreateRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/collection': {
      id: '/collection'
      path: '/collection'
      fullPath: '/collection'
      preLoaderRoute: typeof CollectionRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/view/$id': {
      id: '/view/$id'
      path: '/view/$id'
      fullPath: '/view/$id'
      preLoaderRoute: typeof ViewIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/edit/$id': {
      id: '/edit/$id'
      path: '/edit/$id'
      fullPath: '/edit/$id'
      preLoaderRoute: typeof EditIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CollectionRoute: CollectionRoute,
  CreateRoute: CreateRoute,
  EditIdRoute: EditIdRoute,
  ViewIdRoute: ViewIdRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
